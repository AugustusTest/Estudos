
Git e Github: Controle e compartilhe seu código Git e Github: Controle e compartilhe seu código - Teoria do curso -------

Teoria completa do Git: https://git-scm.com/book/pt-br/v2

Comandos que podem deixar o git bash mais rápido no Windows:

	git config core.preloadindex true: Faz operações do sistema de arquivos em paralelo para ocultar a latência (atualização: ativada por padrão no Git 2.1)
	
	git config core.fscache true: Corrige problemas do UAC para que você não precise executar o Git como administrador (atualização: ativada por padrão no Git para Windows 2.8)
	
	git config --global gc.auto 256: Minimiza o número de arquivos em .git /
	
	git config --global status.submoduleSummary false: Se o git status demora, esta opção sendo definida, o comando é imediato.

Aula 1 - O que é Git? -------

	Teoria -------
		
		Controle de versões: Se temos várias versões de um mesmo código, precisaremos de um controle destas versões, pois modificações estão sendo feitas em paralelo.
			Um servidor de arquivos preparado para receber as alterações de cada pessoa envolvida no projeto resolve este problema.
			Neste servidor deve haver alguma ferramenta capaz de identificar que a versão enviada não é a mais recente, e portanto não deixe o arquivo ser enviado.				Portanto para realizar alterações no código que já está neste servidor, devemos baixar sua versão, realizar alterações e então enviar uma alteração mais nova que aquela.
			E é isto que o Git faz para nós.
	
	
		Temos outras alternativas além do Git, alguma delas são:
				
			CVS
			SVN
			Mercurial
					
		Uma das vantagens do Git sobre estas ferramentas é: Permitir uma cópia do projeto, um repositório do projeto em sua máquina, para que se possa trabalhar em cima dela e então enviá-lo para outro repositório, o que se denomina repositórios distribuídos. Isto permite o trabalho Offline antes do envio de sua versão.
				
					
	Comandos -------
	
		git init = Inicia um repositório onde o Git irá monitorar todos os arquivos e pastas.
			Obs: Comando deve ser executado dentro da pasta desejada através do terminal.
			Obs2: Atráves do Git bash normalmente a pasta ficará com a indicação "Master" a frente do pasta que foi escolhida como repositório.
		
		git status = Informa qual a situação atual de cada arquivo ou pasta. O que precisa ser adicionado, o que foi modificado etc.
			Informa que está rodando no Branch Master: On Branch Master...
			Que não tem nenhum comit ainda: No commits yet...
			Os arquivos que ainda não estão sendo monitorados: Untracked Files...
			
			Informações extras que podem estar juntas com o git status:
			
				HEAD: Estado atual do código.
				
				Working tree: Local onde os arquivos realmente estão sendo armazenados e editados.
				
				index: Local onde o Git armazena o que será commitado, ou seja, o local entre a working tree e o repositório Git em si.
		
	
	Questões -------
	
		1 - Agora que nós já entendemos para que serve um VCS (Version Control System), ou sistema de controle de versões, podemos dar continuidade com este treinamento, mas só para garantir...
		Quais das afirmações a seguir sobre o Git estão corretas?

		Selecione 2 alternativas
		
		R1: Nos deixa organizar o trabalho em equipe, mantendo as alterações nos arquivos em um servidor específico para isso.
		Alternativa correta! O Git permite que a gente armazene as modificações feitas em cada arquivo em um servidor próprio para isso. Toda a gestão de alterações é feita pelo Git e nós só precisamos nos preocupar em criar código que funciona, e não em quem alterou o que antes.
		
		R2: Permite armazenamento e acesso a um histórico de modificações.
		Alternativa correta! Cada alteração que você faz fica gravada em um histórico, podendo ser visualizada e restaurada a qualquer instante.
		
		2 - Já entendemos o motivo para utilizar o Git. Começamos também a entender como o Git funciona. Sabemos que o Git faz a gestão de repositórios, e cada pessoa na equipe pode ter o seu repositório.

		Como fazemos para o Git passar a enxergar determinada pasta como um repositório e a observar as mudanças em seus arquivos?

		Selecione uma alternativa
		
		R: Através do comando git init
		
		Alternativa correta! O git init inicializa um repositório no diretório em que o comando for executado. A partir deste comando, o Git poderá gerenciar as modificações realizadas nos arquivos.
		
		
Aula 2 - Iniciando os trabalhos -------

	Comandos:
		
		git add "arquivo ou pasta" = Adiciona o arquivo ou pasta informada ao monitoramento do Git.
			Obs: Muitas vezes o nome do arquivo ou diretório é muito grande, portanto uma informação de quebra de linha será exibida.
				CR - MacOS, LF - Linux e CR+LF - Windows.
				
		Criando um ".gitignore" global:

			No terminal executar o seguinte comando: $ git config --global core.excludesfile ~/.gitignore_global
			
			O arquivo estará em: .git/info/exclude
			
			Adicione toda pasta ou arquivo que deseja que seja ignorado sem utilizar barra no ínicio (Isto se quiser que todos os arquivos com este nome ou extensão em todas as pastas no repositório sejam afetados).
			
			A vantagem é que não precisamos de um .gitignore que será comitado junto mostrando a outras pessoas o que estamos ignorando em nosso repositório.
			
				Obs: Caso já tenha adicionado alguma pasta que não deve ser compartilhada antes de configurar o arquivo exclude, será necessário remove-la via linha de comando...
				
					git rm --cached -r /."diretorio"
					
			git add .gitignore = Adiciona um arquivo .gitignore local.
		
		git commit -m "Mensagem do commit": Realiza o commit e adiciona a mensagem relacionada ao mesmo.
		
			Primeiro commit: nesso@DESKTOP-L8HE2GA MINGW64 ~/Dropbox/Estudos (master)
								$ git commit -m "Ínicio repositório Estudos"
								[master (root-commit) 3c36730] Ínicio repositório Estudos
								1905 files changed, 203360 insertions(+)
		
			Obs: Nunca devemos commitar um código que não esteja funcionando.
		
		git rm "arquivo ou diretorio" = Para que este seja ignorado pelo Git não sendo mais monitorado.
		
		git log = Mostra o histórico dos commits feitos, hash (Não existem commits com o mesmo hash), branch (Ramo em que o commit se encontra), autor, e-mail configurado, mensagem e data.
		
			HEAD = Local onde nos encontramos no nosso código. A informação a frente na seta é qual ramo estamos (No primeiro momento é normal estarmos no ramo denominado "Master).
		
			git log --oneline = Visualizar todos os commits resumidos em uma linha cada.
			
			git log -p = Visualizar os commits com muito mais informações.
			
				Obs: Neste formato as versões anteriores serão exibidas em vermelho e a versão modificada em verde.
				
			git log --pretty="format:%h %s" = Formatos específicos:
			
				h = Hash resumido.
				
				s = Mensagem completa.
				
				H = Hash completo.
				
				S = Mensagem resumida.
				
				ae = email.
				
					Podemos encontrar mais formatos para exibição de informações do git log no git log cheatsheet: https://devhints.io/git-log em https://devhints.io/git-log-format
					
				git log --help = Ver algumas opções possíveis para o comando git log.
		
		git config:
		
			git config --local = Para alterarmos as configurações locais, ou seja, do projeto atual do Git como nome, email etc.
			
			git config --global = Para alterarmos as configurações de qualquer repositório na máquina.
			
				git config --"local ou global" user.name "Nome Sobrenome" = Altera o nome do autor nas configurações do Git.
				
				git config --"local ou global" user.email "Email" = Altera o email nas configurações do Git.
				
				
	
	Questões:
	
		1 - Para que o Git saiba quem está realizando as alterações, ele precisa de algumas configurações. Na primeira vez que você tentar realizar um commit em uma máquina, ele pedirá que você o configure.

		Como podemos definir o nome da pessoa que executa commits no repositório local atual?

		Selecione uma alternativa
		
		R: git config --local user.name "Nome da pessoa"

		Alternativa correta! Assim todos os commits executados neste repositório serão atribuídos à pessoa com nome Nome da pessoa. Para mais detalhes e outras configurações possíveis (até algumas mais avançadas), você pode conferir este link: https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration.