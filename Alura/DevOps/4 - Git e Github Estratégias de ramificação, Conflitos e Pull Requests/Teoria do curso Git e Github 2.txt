Aula 01 - GitHub e OpenSource -------

	Teoria:
	
		GitHub é muito utilizado pela comunidade de desenvolvimento open source (Código aberto).
		Publicamente isto envolve: Sugestão de melhorias, implementação de melhorias, solicitação de ferramentas ou recursos etc.
		Isto torna o projeto efetivamente colaborativo.
		
		Exemplos de projetos de código aberto:
		
			- VS Code (IDE)
			- NPM (Gerenciador de pacotes usado para baixar dependências do JavaScript e PHP)
		
		Código aberto a comunidade significa, muitas vezes, permitir a melhoria contínua do código de maneira colaborativa.
	
		Algumas boas funcionalidades em projetos open source são as "Issues" ou "Problemas" (Tradução Livre) que torna mais fácil controlar as sugestões de melhorias.
		
		Exemplo de projeto que utiliza Issues de forma interessante:
		
			http://github.com/phprio/cfp ou https://github.com/PHPSP/quero-palestrar/issues (Disponibilizado para cadastro de palestras ou palestrantes realizado por meio de Issues)
			
				Aqui conseguimos filtrar palestrantes através da lista de Issues do projeto.
				
				Ou seja, gerenciamos um tipo de conteúdo que não é propriamente um "problema".
		
		Também podemos organizar as Issues por ordem de prioriadade.
		
		Para entender melhor sobre projetos OpenSource e as vantagens do GitHub neste tipo de projeto:
		
			http://slides.com/daianealvesrj/software-livre-para-empreendedores (Palestra sobre projetos OpenSource bem sucedidos de Daiane Alves no Darkmira Tour PHP 2019)
			
		Por ora, podemos citar alguns tipos de projetos OpenSouce bem sucedidos como plataformas e linguagens de programação como é o caso do PHP, .Net Core, etc.
		
		- Nunca devemos fazer alterações no GitHub diretamente, devemos criar uma cópia do projeto (Fork).
		
		- Se formos donos do repositório ou fizermos parte da organização da empresa, poderemos fechar a issue ("Close issue"), indicando que o problema já foi resolvido.
			Temos a possibilidade de reabrirmos a Issue se quisermos, informando que o problema voltou a acontecer.
		
		CRIANDO UM FORK PARA CONTRIBUIR COM ALGUM PROJETO
		
			1º - Estando logado com na conta do GitHub com a qual queremos contribuir, clicamos em "Fork" na página do projeto que desejado.
			
			2º - Criamos a pasta para alocar o projeto em nossa máquina.
			
			3º - Num primeiro momento o comando "git pull origin master" não funcionará pois o nosso diretório novo não conhece o repositório "origin".
			
<<<<<<< HEAD
			4º - 
=======
>>>>>>> e9e6d46ecc8eee783e8428288efcdbd25733dcb4
		
		
		CORRIGINDO ALGUNS ERROS:
		
			Para os erros:
			
				"error: failed to push some refs to..." fazer: git commit -m "comentário do commit" Após adicionar (git add .) todos os arquivos.
				
				"error: failed to push some refs to..." fazer: git pull origin "nome do branch" --allow-unrelated-histories

				"error: cannot stat...filename too long" fazer: git config --system core.longpaths true
				
				
<<<<<<< HEAD
		EXCLUINDO DIRETÓRIOS LOCAIS GitHub
		
			rm -rf .git = Exclui o diretório local do Git.
			
=======
		EXCLUINDO DIRETÓRIOS LOCAIS GIT
		
			rm -rf .git = Exclui o diretório local do Git.
		
		
		REMOVENDO PERMISSÕES AUTOMATICAS / CORRIGINDO ERROS DE PUSH
		
			git config --local user.email "email da conta" = Adiciona o e-mail do dono do fork (Fork em referência a este curso, porém o procedimento seria o mesmo se estivessemos mudando a autenticação
							para atender outro repositório do Github).
		
			
			
			Obs: No Windows, quando utilizamos um repositório do GitHub, ele sempre tentará utilizar as credenciais utilizadas uma vez, para remove-las...
				"Painel de Controle > Contas de Usuário > Gerenciar suas Credenciais (Gerenciador de Credenciais) > Credenciais do Windows"
					Remova a credencial genérica do GitHub (Clique na seta da credencial do GitHub, para verificar todas as informações e exibir o link de remover).
			
		
		REMOVENDO AUTENTICAÇÕES SSH
		
			ls -al ~/.ssh = Lista todas as chaves.
			
			rm -f ~/.ssh/id_rsa* = Deleta os arquivos id_rsa
			
			Então posso criar uma nova chave SSH clicando em Gerar chave na janela Git GUI mostrada anteriormente...
			
		
		PULL REQUESTS (No GitHub) = Solicitações de merge com o repositório principal de alterações já realizadas no nosso Fork.
		
			Após clicar nesta área New pull request, no GitHub, ele irá verificar se o nosso Fork está "Apto para merge", se nossa branch pode ser automaticamente "mergeada" (rsrsrs)
			
			******* Na Conta dona do Repositório *******
			
				- Analisar solicitação de merge, como: Conflitos, alterações, adições etc
				
				- Clicar no botão "Merge pull request" e em seguida "Confirm merge"
					Com isso teremos um "Pull Request" com o status "Merged".
					
				- Se foi a solução de uma Issue, poderemos fecha-la, junto a um texto "Fechado pelo PR #2 (Id do Pull request), clicando em "Close and comment". (PR = Pull Request).
					A Issue estará fechada e contendo o link para o último Pull request junto a todas as alterações realizadas.
					
			Obs: É bom sempre no título do nosso Pull request especificarmos exatamente qual a correção estamos realizando para que o dono do repositório possa identificar a qual Issue ela se refere (caso exista alguma), para que assim esta Issue possa ser finalmente fechada.
			
		UNIFICANDO COMMITS PARA ORGANIZAR O PULL REQUESTS
		
			O ideal é que organizemos nossos commits em apenas um para quando formos subir o nosso código em um repositório compartilhado para que o dono possa analiza-lo com mais facilidade.
			Podemos analisar nossos commits com um comando já aprendido no outro curso: git log --oneline.
			
			Podemos verificar a quantidade de commits que ainda não sofreram push para o repositório principal e realizar o comando:
				git rebase -i HEAD~"Quantidade dos ultimos commits a serem juntados"
				
				Podemos também realizar o rebase utilizando o número hash do commit anterior aos commits que desejamos trabalhar/enviar:
					git rebase -i "Hash do commit anterior aos que quero trabalhar/enviar"
					
				Após realizar o comando rebase seremos direcionados para uma tela onde os commits serão exibidos e teremos a oportunidade de definir qual sera o commit "pai" dos outros.
				Em outras palavras, um dos commits deverá absorver os outros para que se tornem um, consequentemente o comentário deste commit será aquele da resolução da Issue ou Pull Request qualquer que for enviado.
				
				 Obs: Aquele que contiver o rótulo "pick" será o commit principal, os outros que tiverem o rótulo "s" serão aqueles absorvidos por seus commits anteriores.
			
		
>>>>>>> e9e6d46ecc8eee783e8428288efcdbd25733dcb4
			
	Questões:
	
		1 - Vimos no último vídeo uma funcionalidade interessante do GitHub: as issues. Com esta funcionalidade, podemos atingir alguns resultados interessantes na organização de um projeto.
		
		Sobre o que podemos fazer com issues, avalie as afirmativas abaixo:

<<<<<<< HEAD
		1) Podemos reportar problemas

		2) Podemos sugerir melhorias no código

		3) Podemos organizar quaisquer coisas que façam sentido para o projeto

		Selecione uma alternativa
		
		R: As afirmativas 1, 2 e 3 estão corretas
		
		Alternativa correta! Todas as afirmativas estão corretas, já que o propósito inicial das issues, como o nome já diz, era reportar e controlar os problemas e bugs de um projeto (afirmativa 1). Além disso, com o tempo, passaram a perceber que havia mais possibilidades nas issues, e elas foram utilizadas para sugestão de melhorias no projeto e pedidos de novas funcionalidades (afirmativa 2). Por fim, ótimos exemplos de usos das issues no GitHub são das comunidades PHPSP e PHPRio, que as utilizam para organizar os palestrantes e sugestões de palestras (afirmativa 3).
=======
		a) Podemos reportar problemas

		b) Podemos sugerir melhorias no código

		c) Podemos organizar quaisquer coisas que façam sentido para o projeto

		Selecione uma alternativa
		
		R: As afirmativas a, b e c estão corretas
		
		Alternativa correta! Todas as afirmativas estão corretas, já que o propósito inicial das issues, como o nome já diz, era reportar e controlar os problemas e bugs de um projeto (afirmativa a). Além disso, com o tempo, passaram a perceber que havia mais possibilidades nas issues, e elas foram utilizadas para sugestão de melhorias no projeto e pedidos de novas funcionalidades (afirmativa b). Por fim, ótimos exemplos de usos das issues no GitHub são das comunidades PHPSP e PHPRio, que as utilizam para organizar os palestrantes e sugestões de palestras (afirmativa c).
		
		
		2 - Já vimos como sugerir melhorias ou reportar problemas utilizando issues, mas o nosso trabalho no mundo Open Source pode ser mais ativo. Através de pull requests, nós podemos enviar melhorias e correções para projetos.

		Por que utilizar pull requests e não editar o projeto original?

		Selecione uma alternativa
		
		R: Para garantir a qualidade do projeto pelos seus líderes e organizadores
		
		Alternativa correta! Através de pull requests, os principais mantenedores de um projeto podem analisar todas as alterações, aprová-las ou reprová-las, dar feedback e interagir de uma forma geral. Pull requests não são utilizados apenas para projetos Open Source. Muitas equipes utilizam pull requests em seu dia-a-dia, para enviar as alterações de código para revisão de algum supervisor.
		
		
>>>>>>> e9e6d46ecc8eee783e8428288efcdbd25733dcb4
