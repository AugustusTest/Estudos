Aula 01 - GitHub e OpenSource -------

	Lembrete dos 4 estágios do arquivo no Git:
	
		untracked: Não rastreado ainda pelo Git, precisa ser adicionado.
		
		unmodified: Adicionado mas sem alteração alguma.
		
		modified: Adicionado e modificado, precisa ser adicionado para commit.	
		
		stage: Pronto para ser commitado.


	Teoria:
	
		GitHub é muito utilizado pela comunidade de desenvolvimento open source (Código aberto).
		Publicamente isto envolve: Sugestão de melhorias, implementação de melhorias, solicitação de ferramentas ou recursos etc.
		Isto torna o projeto efetivamente colaborativo.
		
		Exemplos de projetos de código aberto:
		
			- VS Code (IDE)
			- NPM (Gerenciador de pacotes usado para baixar dependências do JavaScript e PHP)
		
		Código aberto a comunidade significa, muitas vezes, permitir a melhoria contínua do código de maneira colaborativa.
	
		Algumas boas funcionalidades em projetos open source são as "Issues" ou "Problemas" (Tradução Livre) que torna mais fácil controlar as sugestões de melhorias.
		
		Exemplo de projeto que utiliza Issues de forma interessante:
		
			http://github.com/phprio/cfp ou https://github.com/PHPSP/quero-palestrar/issues (Disponibilizado para cadastro de palestras ou palestrantes realizado por meio de Issues)
			
				Aqui conseguimos filtrar palestrantes através da lista de Issues do projeto.
				
				Ou seja, gerenciamos um tipo de conteúdo que não é propriamente um "problema".
				
				Lista melhorada do que podemos fazer com as "Issues":
				
					- Reportar problemas
					- Sugerir melhorias
					- Solicitar novas funcionalidades
					- Organizar qualquer coisa que faça sentido para o projeto
					- Etc
		
		Também podemos organizar as Issues por ordem de prioriadade.
		
		Para entender melhor sobre projetos OpenSource e as vantagens do GitHub neste tipo de projeto:
		
			http://slides.com/daianealvesrj/software-livre-para-empreendedores (Palestra sobre projetos OpenSource bem sucedidos de Daiane Alves no Darkmira Tour PHP 2019)
			
		Por ora, podemos citar alguns tipos de projetos OpenSouce bem sucedidos como plataformas e linguagens de programação como é o caso do PHP, .Net Core, etc.
		
		- Nunca devemos fazer alterações no GitHub diretamente, devemos criar uma cópia do projeto (Fork).
		
		- Se formos donos do repositório ou fizermos parte da organização da empresa, poderemos fechar a issue ("Close issue"), indicando que o problema já foi resolvido.
			Temos a possibilidade de reabrirmos a Issue se quisermos, informando que o problema voltou a acontecer.
		
		CRIANDO UM FORK PARA CONTRIBUIR COM ALGUM PROJETO
		
			1º - Estando logado com na conta do GitHub com a qual queremos contribuir, clicamos em "Fork" na página do projeto que desejado.
			
			2º - Criamos a pasta para alocar o projeto em nossa máquina.
			
			3º - Num primeiro momento o comando "git pull origin master" não funcionará pois o nosso diretório novo não conhece o repositório "origin".
			
		
		
		CORRIGINDO ALGUNS ERROS:
		
			Para os erros:
			
				"error: failed to push some refs to..." fazer: git commit -m "comentário do commit" Após adicionar (git add .) todos os arquivos.
				
				"error: failed to push some refs to..." fazer: git pull origin "nome do branch" --allow-unrelated-histories

				"error: cannot stat...filename too long" fazer: git config --system core.longpaths true
				
				
		EXCLUINDO DIRETÓRIOS LOCAIS GIT
		
			rm -rf .git = Exclui o diretório local do Git.
		
		
		REMOVENDO PERMISSÕES AUTOMATICAS / CORRIGINDO ERROS DE PUSH
		
			git config --local user.email "email da conta" = Adiciona o e-mail do dono do fork (Fork em referência a este curso, porém o procedimento seria o mesmo se estivessemos mudando a autenticação
							para atender outro repositório do Github).
		
			
			
			Obs: No Windows, quando utilizamos um repositório do GitHub, ele sempre tentará utilizar as credenciais utilizadas uma vez, para remove-las...
				"Painel de Controle > Contas de Usuário > Gerenciar suas Credenciais (Gerenciador de Credenciais) > Credenciais do Windows"
					Remova a credencial genérica do GitHub (Clique na seta da credencial do GitHub, para verificar todas as informações e exibir o link de remover).
			
		
		REMOVENDO AUTENTICAÇÕES SSH
		
			ls -al ~/.ssh = Lista todas as chaves.
			
			rm -f ~/.ssh/id_rsa* = Deleta os arquivos id_rsa
			
			Então posso criar uma nova chave SSH clicando em Gerar chave na janela Git GUI mostrada anteriormente...
			
		
		PULL REQUESTS (No GitHub) = Solicitações de merge com o repositório principal de alterações já realizadas no nosso Fork.
		
			Após clicar nesta área New pull request, no GitHub, ele irá verificar se o nosso Fork está "Apto para merge", se nossa branch pode ser automaticamente "mergeada" (rsrsrs)
			
			******* Na Conta dona do Repositório *******
			
				- Analisar solicitação de merge, como: Conflitos, alterações, adições etc
				
				- Clicar no botão "Merge pull request" e em seguida "Confirm merge"
					Com isso teremos um "pull Request" com o status "Merged".
					
				- Se foi a solução de uma Issue, poderemos fecha-la, junto a um texto "Fechado pelo PR #2 (Id do Pull request), clicando em "Close and comment". (PR = Pull Request).
					A Issue estará fechada e contendo o link para o último Pull request junto a todas as alterações realizadas.
					
			Obs: É bom sempre no título do nosso Pull request especificarmos exatamente qual a correção estamos realizando para que o dono do repositório possa identificar a qual Issue ela se refere (caso exista alguma), para que assim esta Issue possa ser finalmente fechada.
			
		UNIFICANDO COMMITS PARA ORGANIZAR O PULL REQUESTS
		
			O ideal é que organizemos nossos commits em apenas um para quando formos subir o nosso código em um repositório compartilhado para que o dono possa analiza-lo com mais facilidade.
			Podemos analisar nossos commits com um comando já aprendido no outro curso: git log --oneline.
			
			Podemos verificar a quantidade de commits que ainda não sofreram push para o repositório principal e realizar o comando:
				git rebase -i HEAD~"Quantidade dos ultimos commits a serem juntados"
				
				Podemos também realizar o rebase utilizando o número hash do commit anterior aos commits que desejamos trabalhar/enviar:
					git rebase -i "Hash do commit anterior aos que quero trabalhar/enviar"
					
				Após realizar o comando rebase seremos direcionados para uma tela onde os commits serão exibidos e teremos a oportunidade de definir qual sera o commit "pai" dos outros.
				Em outras palavras, um dos commits deverá absorver os outros para que se tornem um, consequentemente o comentário deste commit será aquele da resolução da Issue ou Pull Request qualquer que for enviado.
				
				 Obs: Aquele que contiver o rótulo "pick" será o commit principal, os outros que tiverem o rótulo "s" serão aqueles absorvidos por seus commits anteriores.
				 
				 Salvamos o arquivo que foi aberto com ":+x"
				 
		
		ARTIGO PARA ENTENDER MELHOR OS PULL REQUEST FECHANDO AS ISSUES COM PALAVRAS CHAVE
		
			https://help.github.com/en/articles/closing-issues-using-keywords
			
		
		ALTERNATIVAS AO GITHUB
		
			- Gitbucket: Pode ser criado repositórios públicos.
			- GitLab: Full DevOps - Gerenciar ferramentas de servidores de integração e entrega contínua.
			
			Obs: GitHub permite que o repositório seja privado para projetos com até 3 colaboradores.
		
		
		
Aula 02 - Controle avançado de conflitos -------		
			
		CHERRY-PICK
		
			Cherry-pick é uma forma de trazer apenas as alterações de um commit para o branch master.
			
				git cherry-pick "hash do commit desejado" = Se você quer apenas uma alteração de outra branch, informando o hash do commit em que houve a alteração, você irá traze-lá sem a necessidade de carregar todas as outras
															alterações daquele branch para master.
			
		
		ENCONTRANDO BUGS
		
			Para encontrar bugs temos a ferramenta "git bisect" que serve para "debugarmos" nosso commit indo a partir de um commit específico até a nossa "HEAD" e verificarmos onde está a alteração que procuramos.
			
				git bisect start = Inicia a ferramenta.
				
					git bisect bad "Hash do commit" = Onde estamos atualmente, em outras palavras o HEAD com o commit que não estamos satisfeitos.
				
					git bisect good "Hash do commit" = Onde irá iniciar o "debug" dos commits.
				
						git bisect bad = Enquanto não encontrar o commit desejado.
						
						git bisect good = Quando encontrar o commit desejado.
						
						git bisect reset = Para voltar para o branch master.
						
						Então, será possível usar o hash exibido para reverter alterações.
						
							git revert "Hash do commit (7 ou 8 primeiros caracteres do commit)" = Reverte as alterações indo para o commit do hash informado.
						
						Obs: É possível que haja conflitos com o nosso HEAD e a alteração que desejamos (se desejamos) trazer de volta, se isto acontecer resolva os conflitos adicione o arquivo para commit e realize o commit.
						
						Obs 2: Podemos também depois de achar o commit desejado utilizar o git show, que nos mostra todas as alterações realizadas naquele commit.
						
							git show "Hash do commit (7 ou 8 primeiros caracteres)" = Mostra todas as alterações do commit do hash informado.
							
							
		ENCONTRANDO O CULPADO
		
			Para que possamos encontrar o responsável por cada uma das linhas escritas em nosso código, utilizamos o recurso blame.
			
				git blame "arquivo" = É exibido o responsável por cada linha de código.
				
				Obs: Apesar do nome, o recurso blame nunca deve ser utilizado única e simplesmente para apontar culpados, dar bronca etc.
					O intuito é ensinar, aprender mais, se atualizar ou criticar de forma construtiva.
					
		
		Nesta aula, aprendemos:

			Que o comando git cherry-pick pode trazer um commit específico para a branch atual;
			Como encontrar o commit em que determinada alteração foi aplicada, utilizando o git bisect;
			Como encontrar o responsável por determinada linha ou bloco de código, utilizando o git blame;
			Que jamais devemos apontar um culpado por determinado bug. Uma equipe deve ser unida e se ajudar;
			Que o comando git show {hash} mostra todas as alterações aplicadas pelo commit com o hash informado.
				

Aula 03 - Estratégias de Branching -------

		Iniciando a aula lembrando que não é uma boa prática commitar diretamente no branch master.
		Utilizar sempre outros branchs (Um cada desenvolvedor que estiver trabalhando no projeto) para que depois que a mudança estiver estável possamos subir nossas alterações para o branch master.
		
		git branch -d "Nome do Branch" = Deleta o branch desejado.
		
			Obs: Caso haja algum conflito como o branch a ser deletado estar à frente do branch atual teremos que utilizar ao invés de -d utilizar -D (Em maiúsculo).
			
			Relembrando: Para criar uma tag = git tag - "Nome da tag" (Depois devemos adicionar uma mensagem dentro do arquivo da Tag).
			
							Sair do Git (Terminal) = exit ou logout.
							
		GIT FLOW
		
			É uma forma de organização onde por padrão utilizamos cada branch para o seu devido fim.
			
				MASTER: Só serve para receber os commits que estão prontos para ir para produção, e a partir destes commits geramos as tags.
						Obs: Sempre que encontramos um erro na branch master, criamos um branch hotfix para corrigir este erro.
				
				HOTFIX: Branch de correção de erros que acontecem direto na Master. As correções desenvolvidas aqui voltam direto para a Master.
						Obs: Mandamos também as correções feitas aqui para a branch develop para que as features também possam se aproveitar das correções.
				
				DEVELOP: A partir dela serão criadas as branchs de features e as funcionalides serão mandadas de volta para a Develop.
							Obs: Depois de todas as features criadas e já de volta a branch develop, criamos uma branch chamada Release.
				
				FEATURE: Branch de ferramentas individuais que após prontas vão para a branch develop. 
				
				RELEASE: Aqui dentro só corrigimos os bugs relacionados a esta release. Sempre que um bug for corrigido, mandamos de volta para a branch develop para que outras features utilizem está correção.
		
		
		Nesta aula, aprendemos:

			Que é uma convenção bem seguida que a branch master tenha apenas os commits prontos para ir para produção;
			Que não é interessante realizar trabalho e commitar diretamente na branch master;
			Como remover uma branch:
			git branch -d {nome_branch} remove uma branch que já tem seu trabalho unido à branch atual;
			git branch -D {nome_branch} remove uma branch mesmo que os commits desta branch ainda não estejam na branch atual, ou seja, força a remoção;
			Um pouco do processo chamado de Git Flow:
			Entendemos que o estado do código representado pela branch master deve ser o mesmo que estará em produção
			Vimos que deve haver uma branch de desenvolvimento (comumente chamado de develop), onde todas as funcionalidades e correções devem ser muito bem testadas antes de ir para produção (master)
			Vimos que cada funcionalidade deve ser feita em uma branch separada, e que é comum que esta branch tenha feature/ como prefixo
			Aprendemos também que bugs normalmente são corrigidos em branches separadas, com o prefixo hotfix/
			Além disso, branches específicas para cada release são criadas para realizar os testes e correções de bugs específicos
			
	Questões:
	
		1 - Vimos no último vídeo uma funcionalidade interessante do GitHub: as issues. Com esta funcionalidade, podemos atingir alguns resultados interessantes na organização de um projeto.
		
		Sobre o que podemos fazer com issues, avalie as afirmativas abaixo:

		a) Podemos reportar problemas

		b) Podemos sugerir melhorias no código

		c) Podemos organizar quaisquer coisas que façam sentido para o projeto

		Selecione uma alternativa
		
		R: As afirmativas a, b e c estão corretas
		
		Alternativa correta! Todas as afirmativas estão corretas, já que o propósito inicial das issues, como o nome já diz, era reportar e controlar os problemas e bugs de um projeto (afirmativa a). Além disso, com o tempo, passaram a perceber que havia mais possibilidades nas issues, e elas foram utilizadas para sugestão de melhorias no projeto e pedidos de novas funcionalidades (afirmativa b). Por fim, ótimos exemplos de usos das issues no GitHub são das comunidades PHPSP e PHPRio, que as utilizam para organizar os palestrantes e sugestões de palestras (afirmativa c).
		
		
		2 - Já vimos como sugerir melhorias ou reportar problemas utilizando issues, mas o nosso trabalho no mundo Open Source pode ser mais ativo. Através de pull requests, nós podemos enviar melhorias e correções para projetos.

		Por que utilizar pull requests e não editar o projeto original?

		Selecione uma alternativa
		
		R: Para garantir a qualidade do projeto pelos seus líderes e organizadores
		
		Alternativa correta! Através de pull requests, os principais mantenedores de um projeto podem analisar todas as alterações, aprová-las ou reprová-las, dar feedback e interagir de uma forma geral. Pull requests não são utilizados apenas para projetos Open Source. Muitas equipes utilizam pull requests em seu dia-a-dia, para enviar as alterações de código para revisão de algum supervisor.
		
		
		3 - Tendo entendido o que são issues e pull requests, nada mais justo do que enviar um pull request para resolver uma issue, certo? Mas quando desenvolvemos, podemos realizar vários commits, o que pode não ser tão interessante para quem for revisar o pull request.

		Por que é interessante unir os commits em um único para enviar um pull request?

		Selecione uma alternativa
		
		R: Para que o responsável pela revisão do projeto tenha um único commit a revisar, com todas as alterações necessárias
		
		Alternativa correta! Revisar um único commit é bem mais fácil e rápido do que analisar diversos commits que resolvem um problema em comum. Por isso, nestes casos, é interessante utilizar o git rebase -i.
		
		
		4 - No último vídeo, vimos como podemos trazer um único commit específico de outra branch para a branch em que estamos trabalhando.

		Em que caso faz sentido trazer um commit específico para a branch atual?

		Selecione uma alternativa
		
		R: Quando um bug que afeta a branch atual já foi solucionado em outra branch
		
		Alternativa correta! Se uma implementação é necessária em sua branch e já foi feita em outra branch, pode fazer sentido trazer um commit específico, utilizando o git cherry-pick.
		
		
		5 - No último vídeo, nós utilizamos o git bisect para encontrar determinado ponto na história do código em que alguma alteração foi introduzida. Fizemos isso, informando os estados do commit (se estava "bom" ou "ruim").

		Para que o git bisect pode ser útil?

		Selecione uma alternativa
		
		R: Para encontrar o commit em que um bug foi introduzido

		Alternativa correta! Encontrando o exato commit em que determinado bug foi introduzido, podemos revertê-lo ou até mesmo tentar entender o motivo daquele bug ter sido introduzido.
		
		
		6 - Com o git blame, podemos ver quem é o responsável por cada linha no código.

		Para que isso pode ser útil?

		Selecione uma alternativa
		
		R: Para saber para quem perguntar sobre determinado bloco de código que não entendemos
		
		Alternativa correta! Com o git blame, nós podemos saber quem é o responsável por determinada linha ou bloco de código que nós não entendemos, e com isso sabemos com quem tirar a dúvida!
		
		
		7 - Durante o vídeo, nós visualizamos o nosso log de commits de uma forma um pouco mais visual, onde as diferentes branches são representadas por linhas separadas.

		Qual o comando para exibir o log desta forma?

		Selecione uma alternativa
		
		R: git log --graph

		Alternativa correta! Desta forma, uma representação um pouco mais gráfica do log é exibida na linha de comando.
		
		
		8 - Aprendemos de forma bem resumida sobre a estratégia de organização de branches, chamada Git Flow.

		Quais as branches presentes nesta estratégia?

		Selecione uma alternativa
		
		R: Master, Develop, Branches de feature, Branches de Hotfix e Branches de release

		Alternativa correta! Cada uma das branches tem um propósito bem definido e nos ajudam a manter o nosso controle de versões bem organizado.
		
		
Aula 04 - Ferramentas visuais -------

	Nesta capitulo veremos algumas ferramentas visuais, embora existam muitas, algumas até recomendadas até no próprio site oficial do Git, conhecer todas neste momento seria inviável.
	
	Git Cola: Visualizar de forma detalhada e intuitiva nosso diretório do git.